services:
    worldland:
        image: infonetlab/worldland_bcai
        container_name: worldland-bcai
        ports:
        - "8546:8545"
        - "30303:30303"
        stdin_open: true
        tty: true
        command:
        - --http
        - --http.addr
        - 0.0.0.0
        - --http.port
        - "8545"
        - --http.api
        - eth,net,web3,personal
        - console

    webui:
        image: node:18-alpine       # 가볍고 npx가 포함된 Node.js 이미지
        container_name: webui
        working_dir: /usr/src/app
        volumes:
        - ./ganache:/usr/src/app  # 로컬 ganache 폴더를 컨테이너에 마운트
        command: ["npx", "http-server", ".", "-p", "8081", "--cors"]
        ports:
        - "8081:8081"
        depends_on:
        - ganache                 # 원하시면 ganache가 올라온 뒤에 시작되게

    nginx:
        build:
            context: ./nginx
        ports:
            - "80:80"
        depends_on:
            - gradio_app
            - fastapi_app

    gradio_app:
        build:
            context: ./app
        links:
            - "fastapi_app:fastapi_url"
        ports:
            - "7860:7860"
        depends_on:
            - fastapi_app
        env_file:
            - .env

    fastapi_app:
        build:
            context: ./api
        links:
            - "ipfs:ipfs"
            - "postgres:postgres_addr"
            - "ganache:ganache_url"
        ports:
            - "8000:8000"
        environment:
            WORLDLAND_RPC:    "http://worldland:8545"
            WORLDLAND_CHAIN_ID: "250407"
            CONTRACT_ADDRESS:   "0x4f28be56BA833340c5A4BA9a5AeE95e2Ce8f3aa8"
            ABI_PATH:           "/app/ganache_build/contracts/MetaDataStoreContract.json"         
        depends_on:
            postgres:
                condition: service_healthy
            worldland:
                condition: service_started
        volumes:
            - ./data/ganache_build:/app/ganache_build
        env_file:
            - .env

    ipfs:
        image: ipfs/kubo
        container_name: ipfs
        ports:
            - "4001:4001" # P2P TCP/QUIC transports
            - "5001:5001" # API port
            - "8080:8080" # Gateway port
        volumes:
            - ./data/ipfs:/data/ipfs
            - ./data/ipfs-export:/export

    ganache:
        build:
            context: ./ganache
        container_name: ganache
        ports:
            - "8545:8545"
        privileged: true
        volumes:
            - ./data/ganache:/data
            - ./data/ganache_build:/ganache/build
        depends_on:
            postgres:
                condition: service_healthy
        networks:
            - default

    postgres:
        build:
            context: ./database
        container_name: postgres_db
        ports:
            - 5432:5432
        volumes:
            - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
            - ./data/postgres:/var/lib/postgresql/data
        env_file:
            - .env
        healthcheck: # PostgreSQL 헬스체크 추가
            test:
                [
                    "CMD-SHELL",
                    "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-sillok-test}",
                ]
            interval: 5s
            timeout: 5s
            retries: 5
            start_period: 10s
networks:
    default:
        driver: bridge
